#!/bin/bash

# Git pre-commit hook for YAML schema validation
# Save this as .git/hooks/pre-commit and make executable: chmod +x .git/hooks/pre-commit

#set -e  # Exit on any error

echo "Running YAML schema validation..."

BASE_URI="file://$(pwd)/risk-map/schemas/"
YAML_BASE_DIR="risk-map/yaml"
SCHEMA_BASE_DIR="risk-map/schemas"
SCHEMA_SUFFIX=".schema.json"
SOURCE_FILES=("controls" "categories" "components" "personas" "risks" "self-assessment")

# Check if check-jsonschema is installed
if ! command -v check-jsonschema &> /dev/null; then
    echo "Error: check-jsonschema is not installed. Install with: pip install check-jsonschema"
    exit 1
fi

# Function to validate a file if it's staged for commit
check_schema() {
    local target="$1"
    local error_type="$2"

    local schema_file="${SCHEMA_BASE_DIR}/${target}${SCHEMA_SUFFIX}"
    local yaml_file="${YAML_BASE_DIR}/${target}.yaml"

    echo "Validating $yaml_file against $schema_file..."
    if ! check-jsonschema --base-uri "$BASE_URI" --schemafile "${schema_file}" "${yaml_file}" > /dev/null ; then
        if [[ -n "$error_type" ]]; then
            echo "$error_type"
            return 1
        else 
            echo "‚ùå Schema validation failed for ${target}.yaml"
            exit 1
        fi
    fi
    
    echo "‚úÖ Schema validation passed for ${target}.yaml"
}

validate_if_staged() {
    local target=$1
    local yaml_file="${YAML_BASE_DIR}/${target}.yaml"
    local schema_file="${SCHEMA_BASE_DIR}/${target}${SCHEMA_SUFFIX}"

    # Check if the YAML file is staged for commit
    if git diff --cached --name-only | grep -q "${yaml_file}$\|${schema_file}$"; then
        check_schema "$target"
    fi
}

# Function to validate all YAML files (used when riskmap.schema.json changes)
validate_all_yaml() {
    echo "riskmap.schema.json changed - validating all YAML files..."
    local failed=0
    echo ${SOURCE_FILES[@]} 
    # Check which YAML files exist and add them to validation list
    for input_file in "${SOURCE_FILES[@]}"; do
        if [[ -f "${YAML_BASE_DIR}/${input_file}.yaml" ]]; then
            check_schema "$input_file" "‚ùå Schema validation for ${input_file}.yaml failed due to riskmap.schema.json changes"
            if [[ $? -ne 0 ]]; then
                failed=1
            fi
        fi
    done

    if [[ $failed -ne 0 ]]; then
        exit 1
    fi 

    echo "‚úÖ All YAML files still valid after riskmap schema changes"
}

# Check if riskmap.schema.json is being modified
if git diff --cached --name-only | grep -q "schemas/riskmap\.schema\.json$"; then
    validate_all_yaml
fi

# Validate each YAML file against its schema (only if staged)
for each in "${SOURCE_FILES[@]}"; do
    validate_if_staged "$each"
done

# =============================================================================
# Component Edge Validation
# =============================================================================
echo "üîó Running component edge validation..."

# Check if the component edge validator exists
EDGE_VALIDATOR=".git/hooks/validate_component_edges.py"
if [[ ! -f "$EDGE_VALIDATOR" ]]; then
    echo "   Warning: Component edge validator not found at $EDGE_VALIDATOR"
    echo "   Skipping edge validation..."
else
    # Run the component edge validation
    if python3 "$EDGE_VALIDATOR"; then
        echo "   ‚úÖ Component edge validation completed successfully"
    else
        echo "   ‚ùå Component edge validation failed!"
        exit 1
    fi
fi

echo

# =============================================================================
# Control-to-Risk Reference Validation
# =============================================================================
echo "üîó Running control-to-risk reference validation..."

# Check if the component edge validator exists
REF_VALIDATOR=".git/hooks/validate_control_risk_references.py"
if [[ ! -f "$REF_VALIDATOR" ]]; then
    echo "   Warning: Control-to-risk reference validator not found at $REF_VALIDATOR"
    echo "   Skipping reference validation..."
else
    # Run the component edge validation
    if python3 "$REF_VALIDATOR"; then
        echo "   ‚úÖ Control-to-risk reference validation completed successfully"
    else
        echo "   ‚ùå Control-to-risk reference validation failed!"
        exit 1
    fi
fi

echo

# =============================================================================
# All validations complete
# =============================================================================
echo "üéâ All pre-commit validations passed!"
echo "   ‚úÖ YAML schema validation"
echo "   ‚úÖ Component edge validation"
echo "   ‚úÖ Control-to-risk reference validation"
echo "Ready to commit! üöÄ"

